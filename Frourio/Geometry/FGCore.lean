import Mathlib.Topology.MetricSpace.Basic
import Mathlib.MeasureTheory.Measure.MeasureSpaceDef
import Mathlib.Analysis.SpecialFunctions.Exp
import Mathlib.Analysis.SpecialFunctions.Log.Basic
import Frourio.Analysis.EVI

/-!
# FG Core (Phase G1): Frourio Geometry core API

This module introduces the minimal core types for Frourio Geometry (FG)
as per design phase G1, generalizing to the m-point calibration setting
while staying proof-light and non-destructive to existing analysis code.

References (design ‚Üí papers):
- papers/mÁÇπÂπæ‰ΩïÂ≠¶1-7.md: FG data (X,d,Œº; ùìî, Œõ), scale action S_{Œõ^k}
- papers/‰ª£Êï∞Â≠¶.md: Analytical backbone (EVI, Doob, Mosco, etc.)

Provided here:
- `FGData`: geometric/analytic data on a metric-measure space.
- `ScaleAction`: abstract scale action with isometry/similarity toggles
  and quasi-invariance/homogeneity predicates.
- `toEVI`: bridge from `FGData` to the existing `EVIProblem`.
- `effectiveLambda`: helper for similarity scaling of the EVI parameter.
-/

namespace Frourio

/-!
FG data on a metric-measure space with an energy and auxiliary
operators. This is intentionally lightweight: Œì, Œì‚ÇÇ are abstract
endomorphisms to keep the API flexible at this phase.
-/
structure FGData (X : Type*) [PseudoMetricSpace X] [MeasurableSpace X] where
  (Œº : MeasureTheory.Measure X)
  (E : X ‚Üí ‚Ñù)
  (Œì : (X ‚Üí ‚Ñù) ‚Üí (X ‚Üí ‚Ñù))
  (Œì‚ÇÇ : (X ‚Üí ‚Ñù) ‚Üí (X ‚Üí ‚Ñù))
  (lam : ‚Ñù)

/- Bridge from FG to the analysis-side EVI problem datum. -/
def FGData.toEVI {X : Type*} [PseudoMetricSpace X] [MeasurableSpace X]
  (FG : FGData X) : EVIProblem X :=
  { E := FG.E, lam := FG.lam }

/-!
Scale action skeleton. The fields are `Prop`-valued to capture
requirements without committing to concrete constructions yet.

‚Ä¢ `Œõ`: scale factor (typically Œõ > 1; the positivity/large-ness is
  asserted via separate predicates, not as fields here).
‚Ä¢ `act`: integer-parameterized action k ‚Ü¶ S_{Œõ^k} on X.
‚Ä¢ `isometry`: declares the action is isometric (Œ± = 0 scenario).
‚Ä¢ `similarity`: declares similarity with an exponent Œ±.
‚Ä¢ `measure_quasiInvariant`: pushforward relation (S_k)_# Œº = Œ∏_k Œº.
‚Ä¢ `generator_homogeneous`: generator scaling exponent Œ∫.
-/
structure ScaleAction (X : Type*) where
  (Lambda : ‚Ñù)
  (act : ‚Ñ§ ‚Üí X ‚Üí X)
  (isometry : Prop)
  (similarity : ‚Ñù ‚Üí Prop)
  (measure_quasiInvariant : (k : ‚Ñ§) ‚Üí Prop)
  (generator_homogeneous : ‚Ñù ‚Üí Prop)

/-!
Effective EVI parameter under similarity scaling. For a similarity with
exponent Œ± and generator homogeneity exponent Œ∫, the effective EVI
parameter at scale k is Œõ^{(Œ∫ - 2Œ±) k} ¬∑ Œª. We model the real power via
`Real.rpow` and coerce `k : ‚Ñ§` into ‚Ñù.
-/
noncomputable def effectiveLambda (Œ± Œ∫ Œõ : ‚Ñù) (k : ‚Ñ§) (lam : ‚Ñù) : ‚Ñù :=
  Real.exp (((Œ∫ - 2 * Œ±) * (k : ‚Ñù)) * Real.log Œõ) * lam

end Frourio
