import Frourio.Analysis.SchwartzDensityLp.ConvolutionTheory
import Frourio.Analysis.SchwartzDensityLp.SchwartzDensityLpCore
import Frourio.Analysis.YoungInequality.YoungInequality
import Mathlib.Analysis.Convolution
import Mathlib.Analysis.Calculus.BumpFunction.Basic
import Mathlib.MeasureTheory.Measure.OpenPos
import Mathlib.MeasureTheory.Function.LpSeminorm.Basic

/-!
# Approximate Identity and Mollifier Convergence

This file establishes the convergence properties of convolution with
approximate identities (mollifiers), which are crucial for the Schwartz
density theorem.

## Main results

- `mollifier_converges_continuous`: For continuous f with compact support,
  ‚Äñf - f * œà_Œ∑‚Äñ_‚àû ‚Üí 0 as Œ∑ ‚Üí 0
- `mollifier_converges_Lp`: For f ‚àà Lp with compact support,
  ‚Äñf - f * œà_Œ∑‚Äñ_p ‚Üí 0 as Œ∑ ‚Üí 0
- `mollifier_converges_L1_compactSupport`: L¬π convergence (used in paper)
- `mollifier_converges_L2_compactSupport`: L¬≤ convergence (used in paper)

## References

- Folland, Real Analysis, Proposition 8.14
- papers/schwartz_density_constructive_analysis.md, Lemma 4.5
- papers/schwartz_density_constructive_analysis.md, Section 4.2

## Key definitions

An approximate identity (mollifier family) is a sequence {œà_Œ∑}_{Œ∑>0} where:
1. œà_Œ∑(x) = Œ∑^(-n) œà(x/Œ∑) for some œà ‚àà C‚àû_c
2. ‚à´ œà = 1 (normalization)
3. œà ‚â• 0 (positivity)
4. supp(œà) ‚äÜ B_1 (compact support)

As Œ∑ ‚Üí 0, œà_Œ∑ "concentrates" near 0 and approximates the Dirac delta function.

-/

open MeasureTheory Complex NNReal SchwartzMap
open scoped ENNReal ContDiff Topology

variable {n : ‚Ñï}

section ApproximateIdentityDefinition

/--
**Approximate identity (mollifier) structure.**

A function œà is a mollifier if it is smooth, compactly supported,
normalized, and non-negative.
-/
structure IsApproximateIdentity (œà : (Fin n ‚Üí ‚Ñù) ‚Üí ‚Ñù) : Prop where
  smooth : ContDiff ‚Ñù (‚àû : WithTop ‚Ñï‚àû) œà
  compact_support : HasCompactSupport œà
  normalized : ‚à´ x, œà x = 1
  nonneg : ‚àÄ x, 0 ‚â§ œà x
  support_subset : tsupport œà ‚äÜ Metric.closedBall (0 : Fin n ‚Üí ‚Ñù) 1

/--
**Scaled mollifier œà_Œ∑.**

œà_Œ∑(x) = Œ∑^(-n) œà(x/Œ∑)
-/
noncomputable def scaledMollifier (œà : (Fin n ‚Üí ‚Ñù) ‚Üí ‚Ñù) (Œ∑ : ‚Ñù) : (Fin n ‚Üí ‚Ñù) ‚Üí ‚Ñù :=
  fun x => Œ∑^(-(n : ‚Ñù)) * œà (fun i => x i / Œ∑)

end ApproximateIdentityDefinition

section UniformContinuityLemmas

/--
**Uniform continuity on compact sets.**

For f continuous with compact support, f is uniformly continuous.
-/
lemma uniformly_continuous_of_compactSupport
    (f : (Fin n ‚Üí ‚Ñù) ‚Üí ‚ÑÇ)
    (hf_cont : Continuous f)
    (hf_compact : HasCompactSupport f) :
    ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ x y,
      ‚Äñx - y‚Äñ < Œ¥ ‚Üí ‚Äñf x - f y‚Äñ < Œµ := by
  classical
  intro Œµ hŒµ
  obtain ‚ü®Œ¥, hŒ¥_pos, hŒ¥‚ü© := (Metric.uniformContinuous_iff.mp
    (hf_compact.uniformContinuous_of_continuous hf_cont)) Œµ hŒµ
  refine ‚ü®Œ¥, hŒ¥_pos, ?_‚ü©
  intro x y hxy
  have hxy' : dist x y < Œ¥ := by simpa [dist_eq_norm] using hxy
  have hŒµ' : dist (f x) (f y) < Œµ := hŒ¥ hxy'
  simpa [dist_eq_norm] using hŒµ'

lemma eventually_tail_indicator_toReal_bound
    (œÜ : ùì¢((Fin n ‚Üí ‚Ñù), ‚ÑÇ))
    (p : ‚Ñù‚â•0‚àû)
    (hp : 1 ‚â§ p)
    (hp_ne_top : p ‚â† ‚àû)
    (Œ¥ : ‚Ñù)
    (coreSet : Set (Fin n ‚Üí ‚Ñù))
    (h_core_volume_lt_top : volume coreSet < ‚ä§)
    (h_tail_indicator_eventually_one :
      ‚àÄ·∂† y in ùìù (0 : Fin n ‚Üí ‚Ñù),
        eLpNorm
            (fun x =>
              Set.indicator coreSet·∂ú
                (fun z => (œÜ : (Fin n ‚Üí ‚Ñù) ‚Üí ‚ÑÇ) (z - y) - œÜ z) x)
            1 volume
          ‚â§ ENNReal.ofReal Œ¥)
    (h_tail_indicator_eLpNorm_ne_top :
      ‚àÄ y : Fin n ‚Üí ‚Ñù,
        eLpNorm
            (fun x =>
              Set.indicator coreSet·∂ú
                (fun z => (œÜ : (Fin n ‚Üí ‚Ñù) ‚Üí ‚ÑÇ) (z - y) - œÜ z) x)
            p volume ‚â† ‚àû)
    (h_tail_indicator_bound :
      ‚àÄ·∂† y in ùìù (0 : Fin n ‚Üí ‚Ñù),
        eLpNorm
            (fun x =>
              Set.indicator coreSet·∂ú
                (fun z => (œÜ : (Fin n ‚Üí ‚Ñù) ‚Üí ‚ÑÇ) (z - y) - œÜ z) x)
            p volume
          ‚â§
            (volume coreSet) ^ (1 / p.toReal)
              * ENNReal.ofReal (Œ¥ / 2)) :
    ‚àÄ·∂† y in ùìù (0 : Fin n ‚Üí ‚Ñù),
      (eLpNorm
          (fun x =>
            Set.indicator coreSet·∂ú
              (fun z => (œÜ : (Fin n ‚Üí ‚Ñù) ‚Üí ‚ÑÇ) (z - y) - œÜ z) x)
          p volume).toReal
        ‚â§
          ((volume coreSet) ^ (1 / p.toReal) * ENNReal.ofReal (Œ¥ / 2)).toReal := by
  classical
  refine
    (h_tail_indicator_eventually_one.and
        ((Filter.Eventually.of_forall fun y =>
            h_tail_indicator_eLpNorm_ne_top y).and
          h_tail_indicator_bound)).mono ?_
  intro y hy
  rcases hy with ‚ü®-, hy‚ü©
  rcases hy with ‚ü®hy_fin, hy_bound‚ü©
  have hp_pos : (0 : ‚Ñù‚â•0‚àû) < p := lt_of_lt_of_le (by simp) hp
  have hp_ne_zero : p ‚â† 0 := ne_of_gt hp_pos
  have hp_toReal_pos : 0 < p.toReal :=
    ENNReal.toReal_pos hp_ne_zero hp_ne_top
  have h_exp_nonneg : 0 ‚â§ 1 / p.toReal := by
    have h_nonneg : 0 ‚â§ p.toReal := hp_toReal_pos.le
    have h_inv_nonneg := inv_nonneg.mpr h_nonneg
    simp [one_div]
  have h_pow_ne_top :
      (volume coreSet) ^ (1 / p.toReal) ‚â† ‚àû :=
    ENNReal.rpow_ne_top_of_nonneg h_exp_nonneg
      (ne_of_lt h_core_volume_lt_top)
  have h_mul_ne_top :
      (volume coreSet) ^ (1 / p.toReal) * ENNReal.ofReal (Œ¥ / 2) ‚â† ‚àû :=
    ENNReal.mul_ne_top h_pow_ne_top (by simp)
  have :=
    (ENNReal.toReal_le_toReal hy_fin h_mul_ne_top).mpr hy_bound
  simpa using this

end UniformContinuityLemmas
