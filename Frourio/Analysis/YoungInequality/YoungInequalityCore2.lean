import Frourio.Analysis.HolderInequality.HolderInequality
import Frourio.Analysis.SchwartzDensityLp.MinkowskiIntegral
import Frourio.Analysis.SchwartzDensityLp.FubiniSection
import Frourio.Analysis.YoungInequality.YoungInequalityCore1
import Mathlib.Analysis.Convolution
import Mathlib.MeasureTheory.Function.LpSeminorm.Basic
import Mathlib.MeasureTheory.Group.Integral
import Mathlib.MeasureTheory.Integral.Bochner.Basic
import Mathlib.MeasureTheory.Integral.Bochner.L1
import Mathlib.MeasureTheory.Integral.Bochner.VitaliCaratheodory
import Mathlib.MeasureTheory.Measure.Haar.Basic

noncomputable section

open scoped BigOperators ENNReal Topology
open MeasureTheory Filter

variable {G Œ± : Type*}

section ConvolutionAuxiliary

variable {G : Type*}
variable [NormedAddCommGroup G] [MeasurableSpace G]
variable [MeasurableAdd‚ÇÇ G] [MeasurableNeg G]
variable (Œº : Measure G) [SFinite Œº] [Œº.IsAddRightInvariant] [Œº.IsNegInvariant]

lemma convolution_memLp_of_memLp
    (f g : G ‚Üí ‚ÑÇ)
    (p q r : ‚Ñù‚â•0‚àû)
    (hp : 1 ‚â§ p) (hq : 1 ‚â§ q)
    (hpqr : 1 / p + 1 / q = 1 + 1 / r)
    (hr_ne_top : r ‚â† ‚àû)
    (hf : MemLp f p Œº) (hf_r : MemLp f r Œº) (hg : MemLp g q Œº)
    (h_kernel_int : Integrable (fun q : G √ó G => f (q.1 - q.2) * g q.2) (Œº.prod Œº)) :
    MemLp (fun x => ‚à´ y, f (x - y) * g y ‚àÇŒº) r Œº := by
  classical
  set Œºn : ‚Ñï ‚Üí Measure G := MeasureTheory.sfiniteSeq Œº
  have hŒºn_fin : ‚àÄ n, IsFiniteMeasure (Œºn n) := fun n => inferInstance
  have hŒº_sum : Measure.sum Œºn = Œº := MeasureTheory.sum_sfiniteSeq Œº
  let Œºpartial : ‚Ñï ‚Üí Measure G := fun N => ‚àë k ‚àà Finset.range (N + 1), Œºn k
  have hŒºpartial_succ : ‚àÄ N, Œºpartial (N + 1) = Œºpartial N + Œºn (N + 1) := by
    intro N
    classical
    simp [Œºpartial, Nat.succ_eq_add_one, Finset.range_succ, add_comm, add_left_comm, add_assoc]
  have hŒºpartial_def :
      ‚àÄ N, Œºpartial N = ‚àë k ‚àà Finset.range (N + 1), Œºn k := fun _ => rfl
  have hŒºpartial_zero : Œºpartial 0 = Œºn 0 := by
    classical
    simp [Œºpartial]
  have hŒºpartial_fin : ‚àÄ N, IsFiniteMeasure (Œºpartial N) := by
    intro N
    classical
    refine Nat.rec ?base ?step N
    ¬∑ simpa [Œºpartial] using hŒºn_fin 0
    ¬∑ intro k hk
      have hk_add : IsFiniteMeasure (Œºpartial k + Œºn (k + 1)) := by infer_instance
      simpa [hŒºpartial_succ, Nat.succ_eq_add_one] using hk_add
  have hŒºpartial_le_succ : ‚àÄ N, Œºpartial N ‚â§ Œºpartial (N + 1) := by
    intro N s
    classical
    have hnonneg : 0 ‚â§ Œºn (N + 1) s := bot_le
    simp [hŒºpartial_succ, Nat.succ_eq_add_one, Measure.add_apply]
  have hŒºpartial_mono : Monotone Œºpartial :=
    monotone_nat_of_le_succ hŒºpartial_le_succ
  have hŒºpartial_le_smul : ‚àÄ N, Œºpartial N ‚â§ ((N + 1 : ‚Ñù‚â•0‚àû) ‚Ä¢ Œº) := by
    intro N
    simpa [Œºpartial] using (sfiniteSeq_partial_le_smul (Œº := Œº) N)
  have hf_partial : ‚àÄ N, MemLp f p (Œºpartial N) := by
    intro N
    refine hf.of_measure_le_smul (Œº' := Œºpartial N) (c := (N + 1 : ‚Ñù‚â•0‚àû)) ?_ ?_
    ¬∑ simp [Nat.succ_eq_add_one]
    ¬∑ simpa using hŒºpartial_le_smul N
  have hf_r_partial : ‚àÄ N, MemLp f r (Œºpartial N) := by
    intro N
    refine hf_r.of_measure_le_smul (Œº' := Œºpartial N) (c := (N + 1 : ‚Ñù‚â•0‚àû)) ?_ ?_
    ¬∑ simp [Nat.succ_eq_add_one]
    ¬∑ simpa using hŒºpartial_le_smul N
  have hg_partial : ‚àÄ N, MemLp g q (Œºpartial N) := by
    intro N
    refine hg.of_measure_le_smul (Œº' := Œºpartial N) (c := (N + 1 : ‚Ñù‚â•0‚àû)) ?_ ?_
    ¬∑ simp [Nat.succ_eq_add_one]
    ¬∑ simpa using hŒºpartial_le_smul N
  have hŒºpartial_ac : ‚àÄ N, Œºpartial N ‚â™ Œº := by
    intro N
    exact Measure.absolutelyContinuous_of_le_smul (hŒºpartial_le_smul N)
  have hŒºpartial_tendsto :
      ‚àÄ ‚¶És : Set G‚¶Ñ, MeasurableSet s ‚Üí
        Tendsto (fun N => Œºpartial N s) atTop (ùìù (Œº s)) := by
    exact sfiniteSeq_partial_tendsto (Œº := Œº)
  have h_inv_p_le_one : p‚Åª¬π ‚â§ (1 : ‚Ñù‚â•0‚àû) := by
    simpa using (ENNReal.inv_le_inv).2 hp
  have h_inv_q_le_one : q‚Åª¬π ‚â§ (1 : ‚Ñù‚â•0‚àû) := by
    simpa using (ENNReal.inv_le_inv).2 hq
  have h_inv_r_le_one : r‚Åª¬π ‚â§ (1 : ‚Ñù‚â•0‚àû) := by
    have h_sum_le_two : p‚Åª¬π + q‚Åª¬π ‚â§ (1 : ‚Ñù‚â•0‚àû) + 1 :=
      add_le_add h_inv_p_le_one h_inv_q_le_one
    have h_eq : p‚Åª¬π + q‚Åª¬π = (1 : ‚Ñù‚â•0‚àû) + r‚Åª¬π := by
      simpa [one_div, add_comm, add_left_comm, add_assoc] using hpqr
    have h_aux : (1 : ‚Ñù‚â•0‚àû) + r‚Åª¬π ‚â§ (1 : ‚Ñù‚â•0‚àû) + 1 := by
      simpa [h_eq] using h_sum_le_two
    exact ENNReal.le_of_add_le_add_left (by simp) h_aux
  have hr : 1 ‚â§ r :=
    (ENNReal.inv_le_inv).1 (by simpa using h_inv_r_le_one)
  have h_kernel_fiber_int :
      ‚àÄ·µê x ‚àÇŒº, Integrable (fun y => f (x - y) * g y) Œº := by
    have h := Integrable.prod_right_ae (Œº := Œº) (ŒΩ := Œº) h_kernel_int
    refine h.mono ?_
    intro x hx
    simpa [sub_eq_add_neg] using hx
  have h_kernel_fiber_int_left :
      ‚àÄ·µê y ‚àÇŒº, Integrable (fun x => f (x - y) * g y) Œº := by
    have h := Integrable.prod_left_ae (Œº := Œº) (ŒΩ := Œº) h_kernel_int
    refine h.mono ?_
    intro y hy
    simpa [sub_eq_add_neg] using hy
  have h_kernel_meas :
      AEStronglyMeasurable (fun q : G √ó G => f (q.1 - q.2) * g q.2) (Œº.prod Œº) :=
    h_kernel_int.aestronglyMeasurable
  set conv : G ‚Üí ‚ÑÇ := fun x => ‚à´ y, f (x - y) * g y ‚àÇŒº
  have h_conv_meas : AEStronglyMeasurable conv Œº := by
    simpa [conv] using
      aestronglyMeasurable_convolution (Œº := Œº)
        (f := f) (g := g) h_kernel_int h_kernel_fiber_int
  have hf_n : ‚àÄ n, MemLp f p (Œºn n) := fun n =>
    hf.of_measure_le_smul (Œº' := Œºn n) (c := (1 : ‚Ñù‚â•0‚àû)) (by simp)
      (by simpa [Œºn, one_smul] using MeasureTheory.sfiniteSeq_le (Œº := Œº) n)
  have hg_n : ‚àÄ n, MemLp g q (Œºn n) := fun n =>
    hg.of_measure_le_smul (Œº' := Œºn n) (c := (1 : ‚Ñù‚â•0‚àû)) (by simp)
      (by simpa [Œºn, one_smul] using MeasureTheory.sfiniteSeq_le (Œº := Œº) n)
  have hŒºpartial_tendsto_univ :
      Tendsto (fun N => Œºpartial N Set.univ) atTop (ùìù (Œº Set.univ)) :=
    hŒºpartial_tendsto MeasurableSet.univ
  set convPartial : ‚Ñï ‚Üí G ‚Üí ‚ÑÇ := fun N x => ‚à´ y, f (x - y) * g y ‚àÇŒºpartial N
  have hconvPartial_tendsto_measure := hŒºpartial_tendsto_univ
  have h_prod_le :
      ‚àÄ N,
        (Œºpartial N).prod (Œºpartial N) ‚â§
          (((N + 1 : ‚Ñù‚â•0‚àû) * (N + 1 : ‚Ñù‚â•0‚àû)) ‚Ä¢ (Œº.prod Œº)) := by
    intro N
    simpa [Œºpartial, Œºn]
      using (sfiniteSeq_partial_prod_le_smul (Œº := Œº) N)
  have h_kernel_int_partial :
      ‚àÄ N,
        Integrable (fun q : G √ó G => f (q.1 - q.2) * g q.2)
          ((Œºpartial N).prod (Œºpartial N)) := by
    intro N
    classical
    have h_const_ne_top :
        ((N + 1 : ‚Ñù‚â•0‚àû) * (N + 1 : ‚Ñù‚â•0‚àû)) ‚â† ‚àû := by
      simpa using ENNReal.mul_ne_top (by simp) (by simp)
    refine
      Integrable.of_measure_le_smul
        (Œº := Œº.prod Œº)
        (Œº' := (Œºpartial N).prod (Œºpartial N))
        (f := fun q : G √ó G => f (q.1 - q.2) * g q.2)
        h_const_ne_top (h_prod_le N) ?_
    simpa using h_kernel_int
  have hŒºpartial_prod_ac :
      ‚àÄ N,
        ((Œºpartial N).prod (Œºpartial N)) ‚â™ (Œº.prod Œº) := by
    intro N
    refine
      (Measure.absolutelyContinuous_of_le_smul
        (Œº := Œº.prod Œº)
        (Œº' := (Œºpartial N).prod (Œºpartial N))
        (c := ((N + 1 : ‚Ñù‚â•0‚àû) * (N + 1 : ‚Ñù‚â•0‚àû))) ?_)
    simpa using h_prod_le N
  have h_kernel_meas_partial :
      ‚àÄ N,
        AEStronglyMeasurable
          (fun q : G √ó G => f (q.1 - q.2) * g q.2)
          ((Œºpartial N).prod (Œºpartial N)) := by
    intro N
    refine
      MeasureTheory.AEStronglyMeasurable.mono_ac
        (Œº := Œº.prod Œº)
        (ŒΩ := (Œºpartial N).prod (Œºpartial N))
        (f := fun q : G √ó G => f (q.1 - q.2) * g q.2)
        (h := hŒºpartial_prod_ac N)
        h_kernel_meas
  refine ‚ü®h_conv_meas, ?_‚ü©
  have h_kernel_fiber_int_partial :
      ‚àÄ N, ‚àÄ·µê x ‚àÇ Œºpartial N, Integrable (fun y => f (x - y) * g y) (Œºpartial N) := by
    intro N
    have h :=
      Integrable.prod_right_ae (Œº := Œºpartial N) (ŒΩ := Œºpartial N)
        (h_kernel_int_partial N)
    refine h.mono ?_
    intro x hx
    simpa [sub_eq_add_neg] using hx
  have h_convPartial_meas :
      ‚àÄ N, AEStronglyMeasurable (convPartial N) (Œºpartial N) := by
    intro N
    have :=
      aestronglyMeasurable_convolution (Œº := Œºpartial N)
        (f := f) (g := g) (h_kernel := h_kernel_int_partial N)
        (h_fiber := h_kernel_fiber_int_partial N)
    simpa [convPartial] using this
  have h_translate_norm_bound :
      ‚àÄ N y,
        eLpNorm (fun x => f (x - y)) r (Œºpartial N) ‚â§
          ((N + 1 : ‚Ñù‚â•0‚àû) ^ (1 / r).toReal) * eLpNorm f r Œº := by
    intro N y
    classical
    exact
      sfiniteSeq_partial_translate_norm_bound
        (Œº := Œº) (r := r) (f := f)
        (Œºpartial := Œºpartial)
        (hf := hf_r)
        (h_le := hŒºpartial_le_smul) N y
  have h_translate_norm_bound_toReal :
      ‚àÄ N y,
        (eLpNorm (fun x => f (x - y)) r (Œºpartial N)).toReal ‚â§
          ((N + 1 : ‚Ñù‚â•0‚àû) ^ (1 / r).toReal * eLpNorm f r Œº).toReal := by
    intro N y
    have h_bound := h_translate_norm_bound N y
    have h_pow_ne_top :
        ((N + 1 : ‚Ñù‚â•0‚àû) ^ (1 / r).toReal) ‚â† ‚àû := by
      have h_exp_nonneg : 0 ‚â§ (1 / r).toReal := by
        simp [one_div]
      exact ENNReal.rpow_ne_top_of_nonneg h_exp_nonneg (by simp)
    have h_const_ne_top :
        ((N + 1 : ‚Ñù‚â•0‚àû) ^ (1 / r).toReal * eLpNorm f r Œº) ‚â† ‚àû :=
      ENNReal.mul_ne_top h_pow_ne_top hf_r.eLpNorm_ne_top
    exact ENNReal.toReal_mono h_const_ne_top h_bound
  have hg_partial_one : ‚àÄ N, MemLp g 1 (Œºpartial N) := by
    intro N
    exact (hg_partial N).mono_exponent (p := (1 : ‚Ñù‚â•0‚àû)) (q := q) hq
  have hg_partial_int : ‚àÄ N, Integrable g (Œºpartial N) := by
    intro N
    exact (memLp_one_iff_integrable).1 (hg_partial_one N)
  have h_kernel_fiber_mem_partial :
      ‚àÄ N, ‚àÄ·µê y ‚àÇ Œº, MemLp (fun x => f (x - y) * g y) r (Œºpartial N) := by
    intro N
    have h :=
      convolution_kernel_fiber_memLp_of_memLp (Œº := Œº)
        (p := r) (q := q) hf_r hg
    refine h.mono ?_
    intro y hy
    refine hy.of_measure_le_smul (Œº' := Œºpartial N) (c := (N + 1 : ‚Ñù‚â•0‚àû)) ?_ ?_
    ¬∑ simp [Nat.succ_eq_add_one]
    ¬∑ simpa using hŒºpartial_le_smul N
  have h_kernel_fiber_int_partial' :
      ‚àÄ N, ‚àÄ·µê y ‚àÇ Œº,
          Integrable (fun x => f (x - y) * g y) (Œºpartial N) := by
    intro N
    have h := h_kernel_fiber_int_left
    refine h.mono ?_
    intro y hy
    refine hy.of_measure_le_smul (Œº' := Œºpartial N) (c := (N + 1 : ‚Ñù‚â•0‚àû)) ?_ ?_
    ¬∑ simp [Nat.succ_eq_add_one]
    ¬∑ simpa using hŒºpartial_le_smul N
  have h_kernel_fiber_mem_partial_ae :
      ‚àÄ N, ‚àÄ·µê y ‚àÇ Œºpartial N, MemLp (fun x => f (x - y) * g y) r (Œºpartial N) := by
    intro N
    have h_zero :=
      (ae_iff).1 (h_kernel_fiber_mem_partial N)
    have h_zero' :=
      (hŒºpartial_ac N) h_zero
    exact (ae_iff).2 <| by simpa using h_zero'
  have h_kernel_fiber_int_partial :
      ‚àÄ N, ‚àÄ·µê y ‚àÇ Œºpartial N,
          Integrable (fun x => f (x - y) * g y) (Œºpartial N) := by
    intro N
    have h_zero :=
      (ae_iff).1 (h_kernel_fiber_int_partial' N)
    have h_zero' :=
      (hŒºpartial_ac N) h_zero
    exact (ae_iff).2 <| by simpa using h_zero'
  have h_norm_partial :=
    sfiniteSeq_partial_integrable_norm_mul
      (Œº := Œº) (hr := hr) (hr_ne_top := hr_ne_top)
      (f := f) (g := g) (Œºpartial := Œºpartial)
      (hf := hf_r)
      (hg_partial_int := hg_partial_int)
      (hŒºpartial_fin := hŒºpartial_fin)
      (hŒºpartial_prod_ac := hŒºpartial_prod_ac)
      (h_translate_norm_bound_toReal := h_translate_norm_bound_toReal)
  have h_norm_partial_le :=
    sfiniteSeq_partial_integral_norm_mul_le
      (Œº := Œº) (r := r) (f := f) (g := g) (Œºpartial := Œºpartial)
      (hg_partial_int := hg_partial_int)
      (h_norm_partial := h_norm_partial)
      (h_translate_norm_bound_toReal := h_translate_norm_bound_toReal)
  have h_convPartial_def :
      ‚àÄ N, convPartial N = fun x => ‚à´ y, f (x - y) * g y ‚àÇ Œºpartial N := by
    intro N
    rfl
  have h_pointwise_piece :
      ‚àÄ N,
        (fun y =>
            (eLpNorm (fun x => f (x - y) * g y) r (Œºpartial N)).toReal)
          =·µê[Œºpartial N]
          fun y =>
            ‚Äñg y‚Äñ * (eLpNorm (fun x => f (x - y)) r (Œºpartial N)).toReal := by
    intro N
    refine Filter.Eventually.of_forall ?_
    intro y
    have h_scaling :
        eLpNorm (fun x => f (x - y) * g y) r (Œºpartial N) =
          ENNReal.ofReal ‚Äñg y‚Äñ * eLpNorm (fun x => f (x - y)) r (Œºpartial N) := by
      have h_smul :
          (fun x : G => f (x - y) * g y) =
            fun x : G => (g y) ‚Ä¢ f (x - y) := by
        funext x
        simp [mul_comm, smul_eq_mul, sub_eq_add_neg]
      simpa [h_smul] using
        eLpNorm_const_smul (Œº := Œºpartial N) (p := r) (c := g y)
          (f := fun x => f (x - y))
    have h_toReal := congrArg ENNReal.toReal h_scaling
    have h_nonneg : 0 ‚â§ ‚Äñg y‚Äñ := norm_nonneg _
    simpa [ENNReal.toReal_ofReal_mul, h_nonneg] using h_toReal
  have h_minkowski_partial :=
    convPartial_minkowski_bound
      (Œºpartial := Œºpartial) (f := f) (g := g) (r := r)
      (convPartial := convPartial)
      (h_convPartial := h_convPartial_def)
      (hr := hr) (hr_ne_top := hr_ne_top)
      (hŒºpartial_fin := hŒºpartial_fin)
      (h_kernel_meas_partial := h_kernel_meas_partial)
      (h_kernel_int_partial := h_kernel_int_partial)
      (h_kernel_fiber_int_partial := h_kernel_fiber_int_partial)
      (h_kernel_fiber_mem_partial := h_kernel_fiber_mem_partial_ae)
      (h_norm_partial := h_norm_partial)
  have h_convPartial_bound :=
    convPartial_bound
      (Œº := Œº)
      (Œºpartial := Œºpartial)
      (f := f)
      (g := g)
      (r := r)
      (convPartial := convPartial)
      (h_minkowski_partial := h_minkowski_partial)
      (h_norm_partial_le := h_norm_partial_le)
  have h_convPartial_mem :
      ‚àÄ N, MemLp (convPartial N) r (Œºpartial N) := by
    intro N
    classical
    refine ‚ü®h_convPartial_meas N, ?_‚ü©
    have h_bound := h_convPartial_bound N
    have h_lt_top :
        ENNReal.ofReal
          ((((N + 1 : ‚Ñù‚â•0‚àû) ^ (1 / r).toReal * eLpNorm f r Œº).toReal) *
            ‚à´ y, ‚Äñg y‚Äñ ‚àÇ Œºpartial N) < ‚àû := by
      simp
    exact lt_of_le_of_lt h_bound h_lt_top
  set convPiece : ‚Ñï ‚Üí G ‚Üí ‚ÑÇ := fun n x => ‚à´ y, f (x - y) * g y ‚àÇ Œºn n
  have h_kernel_fiber_int_mu :
      ‚àÄ·µê x ‚àÇ Œº, Integrable (fun y => f (x - y) * g y) Œº :=
    h_kernel_fiber_int
  have h_kernel_fiber_int_partial_measure :
      ‚àÄ N, ‚àÄ·µê x ‚àÇ Œº, Integrable (fun y => f (x - y) * g y) (Œºpartial N) := by
    intro N
    have h := h_kernel_fiber_int_mu
    refine h.mono ?_
    intro x hx
    refine hx.of_measure_le_smul (Œº := Œº) (Œº' := Œºpartial N)
        (c := (N + 1 : ‚Ñù‚â•0‚àû)) ?_ ?_
    ¬∑ simp [Nat.succ_eq_add_one]
    ¬∑ simpa using hŒºpartial_le_smul N
  have h_kernel_fiber_int_piece :
      ‚àÄ n, ‚àÄ·µê x ‚àÇ Œº, Integrable (fun y => f (x - y) * g y) (Œºn n) := by
    intro n
    have h := h_kernel_fiber_int_mu
    refine h.mono ?_
    intro x hx
    refine hx.of_measure_le_smul (Œº := Œº) (Œº' := Œºn n) (c := (1 : ‚Ñù‚â•0‚àû)) ?_ ?_
    ¬∑ simp
    ¬∑ simpa [Œºn, one_smul] using MeasureTheory.sfiniteSeq_le (Œº := Œº) n
  have h_convPiece_def :
      ‚àÄ n, convPiece n = fun x => ‚à´ y, f (x - y) * g y ‚àÇ Œºn n := by
    intro n
    rfl
  have h_convPartial_sum :=
    convPartial_sum_eq
      (Œº := Œº)
      (Œºpartial := Œºpartial)
      (Œºn := Œºn)
      (f := f)
      (g := g)
      (convPartial := convPartial)
      (convPiece := convPiece)
      (h_convPartial := h_convPartial_def)
      (h_convPiece := h_convPiece_def)
      (hŒºpartial_zero := hŒºpartial_zero)
      (hŒºpartial_succ := hŒºpartial_succ)
      (h_kernel_fiber_int_partial_measure := h_kernel_fiber_int_partial_measure)
      (h_kernel_fiber_int_piece := h_kernel_fiber_int_piece)
  have h_convPartial_partialSum :
      ‚àÄ N,
        convPartial N
          =·µê[Œº]
            fun x => ‚àë k ‚àà Finset.range (N + 1), convPiece k x :=
    h_convPartial_sum
  have hŒºn_le : ‚àÄ n, Œºn n ‚â§ Œº := fun n =>
    by simpa [Œºn, one_smul] using MeasureTheory.sfiniteSeq_le (Œº := Œº) n
  have hŒºn_prod_le : ‚àÄ n, (Œºn n).prod (Œºn n) ‚â§ Œº.prod Œº := by
    intro n
    simpa [Œºn] using sfiniteSeq_prod_le (Œº := Œº) n
  have hŒºn_ac : ‚àÄ n, Œºn n ‚â™ Œº := by
    intro n
    exact Measure.absolutelyContinuous_of_le_smul
      (Œº := Œº)
      (Œº' := Œºn n)
      (c := (1 : ‚Ñù‚â•0‚àû))
      (by simpa [Œºn, one_smul] using MeasureTheory.sfiniteSeq_le (Œº := Œº) n)
  have hŒºn_prod_ac :
      ‚àÄ n, (Œºn n).prod (Œºn n) ‚â™ Œº.prod Œº := by
    intro n
    exact Measure.absolutelyContinuous_of_le_smul
      (Œº := Œº.prod Œº)
      (Œº' := (Œºn n).prod (Œºn n))
      (c := (1 : ‚Ñù‚â•0‚àû))
      (by simpa [one_smul] using hŒºn_prod_le n)
  have h_kernel_int_piece :
      ‚àÄ n,
        Integrable (fun q : G √ó G => f (q.1 - q.2) * g q.2)
          ((Œºn n).prod (Œºn n)) := by
    intro n
    classical
    refine Integrable.of_measure_le_smul
        (Œº := Œº.prod Œº)
        (Œº' := (Œºn n).prod (Œºn n))
        (f := fun q : G √ó G => f (q.1 - q.2) * g q.2)
        (c := (1 : ‚Ñù‚â•0‚àû))
        (by simp)
        (by simpa [one_smul] using hŒºn_prod_le n)
        ?_
    simpa using h_kernel_int
  have h_kernel_meas_piece :
      ‚àÄ n,
        AEStronglyMeasurable
          (fun q : G √ó G => f (q.1 - q.2) * g q.2)
          ((Œºn n).prod (Œºn n)) := by
    intro n
    refine
      MeasureTheory.AEStronglyMeasurable.mono_ac
        (Œº := Œº.prod Œº)
        (ŒΩ := (Œºn n).prod (Œºn n))
        (f := fun q : G √ó G => f (q.1 - q.2) * g q.2)
        (h := hŒºn_prod_ac n)
        h_kernel_meas
  have h_kernel_fiber_int_piece :
      ‚àÄ n, ‚àÄ·µê x ‚àÇ Œºn n,
          Integrable (fun y => f (x - y) * g y) (Œºn n) := by
    intro n
    have h :=
      Integrable.prod_right_ae (Œº := Œºn n) (ŒΩ := Œºn n)
        (h_kernel_int_piece n)
    refine h.mono ?_
    intro x hx
    simpa [sub_eq_add_neg] using hx
  have h_kernel_fiber_int_piece_left :
      ‚àÄ n, ‚àÄ·µê y ‚àÇ Œºn n,
          Integrable (fun x => f (x - y) * g y) (Œºn n) := by
    intro n
    have h :=
      Integrable.prod_left_ae (Œº := Œºn n) (ŒΩ := Œºn n)
        (h_kernel_int_piece n)
    refine h.mono ?_
    intro y hy
    simpa [sub_eq_add_neg] using hy
  have h_convPiece_meas_partial :
      ‚àÄ n, AEStronglyMeasurable (convPiece n) (Œºn n) := by
    intro n
    have :=
      aestronglyMeasurable_convolution (Œº := Œºn n)
        (f := f) (g := g)
        (h_kernel := h_kernel_int_piece n)
        (h_fiber := h_kernel_fiber_int_piece n)
    simpa [convPiece, sub_eq_add_neg] using this
  have hg_piece : ‚àÄ n, MemLp g q (Œºn n) := by
    intro n
    refine hg.of_measure_le_smul (Œº' := Œºn n) (c := (1 : ‚Ñù‚â•0‚àû)) ?_ ?_
    ¬∑ simp
    ¬∑ simpa [Œºn, one_smul] using MeasureTheory.sfiniteSeq_le (Œº := Œº) n
  have hg_piece_one : ‚àÄ n, MemLp g 1 (Œºn n) := by
    intro n
    exact (hg_piece n).mono_exponent (p := (1 : ‚Ñù‚â•0‚àû)) (q := q) hq
  have hg_piece_int : ‚àÄ n, Integrable g (Œºn n) := by
    intro n
    exact (memLp_one_iff_integrable).1 (hg_piece_one n)
  have h_translate_norm_bound_piece :
      ‚àÄ n y,
        eLpNorm (fun x => f (x - y)) r (Œºn n) ‚â§ eLpNorm f r Œº := by
    intro n y
    classical
    have h_le :=
      eLpNorm_mono_measure
        (f := fun x => f (x - y))
        (Œº := Œº)
        (ŒΩ := Œºn n)
        (p := r)
        (hŒºn_le n)
    have h_translate :=
      eLpNorm_comp_add_right
        (Œº := Œº) (f := f) (p := r) (y := -y) hf_r.aestronglyMeasurable
    have h_translate' :
        eLpNorm (fun x => f (x - y)) r Œº = eLpNorm f r Œº := by
      simpa [sub_eq_add_neg] using h_translate
    simpa using h_le.trans (le_of_eq h_translate')
  have h_translate_norm_bound_toReal_piece :
      ‚àÄ n y,
        (eLpNorm (fun x => f (x - y)) r (Œºn n)).toReal ‚â§
          (eLpNorm f r Œº).toReal := by
    intro n y
    have h_bound := h_translate_norm_bound_piece n y
    have h_ne_top : eLpNorm f r Œº ‚â† ‚àû := hf_r.eLpNorm_ne_top
    exact ENNReal.toReal_mono h_ne_top h_bound
  have h_kernel_fiber_mem_piece :
      ‚àÄ n, ‚àÄ·µê y ‚àÇ Œºn n,
          MemLp (fun x => f (x - y) * g y) r (Œºn n) := by
    intro n
    have h_aux :=
      convolution_kernel_fiber_memLp_of_memLp (Œº := Œº)
        (p := r) (q := q) hf_r hg
    have h_aux' :
        ‚àÄ·µê y ‚àÇ Œº, MemLp (fun x => f (x - y) * g y) r (Œºn n) :=
      h_aux.mono fun y hy =>
        hy.of_measure_le_smul (Œº := Œº) (Œº' := Œºn n) (c := (1 : ‚Ñù‚â•0‚àû))
          (by simp)
          (by
            simpa [Œºn, one_smul] using MeasureTheory.sfiniteSeq_le (Œº := Œº) n)
    have h_zero := (ae_iff).1 h_aux'
    have h_zero' := (hŒºn_ac n) h_zero
    exact (ae_iff).2 <| by simpa using h_zero'
  have hf_r_n : ‚àÄ n, MemLp f r (Œºn n) := fun n =>
    hf_r.of_measure_le_smul (Œº := Œº) (Œº' := Œºn n) (c := (1 : ‚Ñù‚â•0‚àû))
      (by simp)
      (by
        simpa [Œºn, one_smul] using MeasureTheory.sfiniteSeq_le (Œº := Œº) n)
  have h_norm_piece :=
    sfiniteSeq_piece_integrable_norm_mul
      (Œº := Œº) (r := r)
      (hr := hr) (hr_ne_top := hr_ne_top)
      (f := f) (g := g) (Œºn := Œºn)
      (hf_r := hf_r)
      (hg_piece_int := hg_piece_int)
      (hŒºn_fin := hŒºn_fin)
      (hŒºn_prod_ac := hŒºn_prod_ac)
      (h_translate_norm_bound_toReal_piece := h_translate_norm_bound_toReal_piece)
  have h_convPiece_def :
      ‚àÄ n, convPiece n = fun x => ‚à´ y, f (x - y) * g y ‚àÇ Œºn n := by
    intro n
    rfl
  have h_pointwise_piece_piece :
      ‚àÄ n,
        (fun y =>
            (eLpNorm (fun x => f (x - y) * g y) r (Œºn n)).toReal)
          =·µê[Œºn n]
          fun y =>
            ‚Äñg y‚Äñ * (eLpNorm (fun x => f (x - y)) r (Œºn n)).toReal := by
    intro n
    refine Filter.Eventually.of_forall ?_
    intro y
    have h_scaling :
        eLpNorm (fun x => f (x - y) * g y) r (Œºn n) =
          ENNReal.ofReal ‚Äñg y‚Äñ *
            eLpNorm (fun x => f (x - y)) r (Œºn n) := by
      have h_smul :
          (fun x : G => f (x - y) * g y) =
            fun x : G => (g y) ‚Ä¢ f (x - y) := by
        funext x
        simp [mul_comm, smul_eq_mul, sub_eq_add_neg]
      simpa [h_smul] using
        eLpNorm_const_smul (Œº := Œºn n) (p := r)
          (c := g y) (f := fun x => f (x - y))
    have h_toReal := congrArg ENNReal.toReal h_scaling
    have h_nonneg : 0 ‚â§ ‚Äñg y‚Äñ := norm_nonneg _
    simpa [ENNReal.toReal_ofReal_mul, h_nonneg]
      using h_toReal
  have h_norm_piece_pointwise :
      ‚àÄ n,
        Integrable
          (fun y =>
            (eLpNorm (fun x => f (x - y) * g y) r (Œºn n)).toReal)
          (Œºn n) := by
    intro n
    refine (h_norm_piece n).congr ?_
    simpa using (h_pointwise_piece_piece n).symm
  have h_minkowski_piece :=
    sfiniteSeq_piece_minkowski_bound
      (Œº := Œº) (r := r)
      (hr := hr) (hr_ne_top := hr_ne_top)
      (f := f) (g := g) (Œºn := Œºn)
      (convPiece := convPiece)
      (hŒºn_fin := hŒºn_fin)
      (h_kernel_meas_piece := h_kernel_meas_piece)
      (h_kernel_int_piece := h_kernel_int_piece)
      (h_kernel_fiber_int_piece_left := h_kernel_fiber_int_piece_left)
      (h_kernel_fiber_mem_piece := h_kernel_fiber_mem_piece)
      (h_norm_piece := h_norm_piece_pointwise)
      (h_pointwise := h_pointwise_piece_piece)
      (h_convPiece_def := h_convPiece_def)
  have h_convPiece_mem_piece :
      ‚àÄ n, MemLp (convPiece n) r (Œºn n) := by
    intro n
    classical
    haveI := hŒºn_fin n
    have h_bound := h_minkowski_piece n
    have h_rhs_lt_top :
        ENNReal.ofReal
            (‚à´ y, ‚Äñg y‚Äñ *
                (eLpNorm (fun x => f (x - y)) r (Œºn n)).toReal ‚àÇ Œºn n) < ‚àû := by
      simp
    exact ‚ü®h_convPiece_meas_partial n, lt_of_le_of_lt h_bound h_rhs_lt_top‚ü©
  have h_convPartial_partialSum' :
      ‚àÄ N,
        convPartial N
          =·µê[Œºpartial N]
            fun x => ‚àë k ‚àà Finset.range (N + 1), convPiece k x := by
    intro N
    have h := h_convPartial_partialSum N
    exact (hŒºpartial_ac N) h
  have h_convPartial_mem_sum :
      ‚àÄ N, MemLp (fun x => ‚àë k ‚àà Finset.range (N + 1), convPiece k x) r (Œºpartial N) :=
    by
    intro N
    classical
    obtain ‚ü®h_meas, h_lt_top‚ü© := h_convPartial_mem N
    have h_ae :
        (fun x => ‚àë k ‚àà Finset.range (N + 1), convPiece k x) =·µê[Œºpartial N]
          convPartial N := (h_convPartial_partialSum' N).symm
    refine ‚ü®h_meas.congr h_ae.symm, ?_‚ü©
    have h_eLp :=
      eLpNorm_congr_ae (Œº := Œºpartial N) (p := r) h_ae
    simpa [h_eLp.symm] using h_lt_top
  have h_integral_norm_partial :=
    sfiniteSeq_partial_integral_norm
      (g := g)
      (Œºpartial := Œºpartial)
      (Œºn := Œºn)
      (hŒºpartial_zero := hŒºpartial_zero)
      (hŒºpartial_succ := hŒºpartial_succ)
      (hg_partial_int := hg_partial_int)
      (hg_piece_int := hg_piece_int)
  have h_convPartial_bound_sum :
      ‚àÄ N,
        eLpNorm (convPartial N) r (Œºpartial N) ‚â§
          ENNReal.ofReal
            ((((N + 1 : ‚Ñù‚â•0‚àû) ^ (1 / r).toReal * eLpNorm f r Œº).toReal) *
              ‚àë k ‚àà Finset.range (N + 1), ‚à´ y, ‚Äñg y‚Äñ ‚àÇ Œºn k) := by
    intro N
    classical
    simpa [h_integral_norm_partial N, mul_comm, mul_left_comm, mul_assoc]
      using h_convPartial_bound N
  have hŒºpartial_le :=
    sfiniteSeq_partial_le_measure
      (Œº := Œº)
      (Œºn := Œºn)
      (Œºpartial := Œºpartial)
      (hŒº_sum := hŒº_sum)
      (hŒºpartial_def := hŒºpartial_def)
  have h_lintegral_norm_le :
      ‚àÄ N,
        ‚à´‚Åª y, ‚Äñg y‚Äñ‚Çë ‚àÇ Œºpartial N ‚â§ ‚à´‚Åª y, ‚Äñg y‚Äñ‚Çë ‚àÇ Œº := by
    intro N
    exact lintegral_mono' (hŒºpartial_le N) fun _ => le_rfl
  have h_norm_piece_le :=
    sfiniteSeq_piece_norm_le
      (Œº := Œº)
      (r := r)
      (f := f)
      (g := g)
      (Œºn := Œºn)
      (hg_piece_int := hg_piece_int)
      (h_norm_piece := h_norm_piece)
      (h_translate_norm_bound_toReal_piece := h_translate_norm_bound_toReal_piece)
  have h_convPiece_bound :=
    sfiniteSeq_piece_conv_bound
      (Œº := Œº)
      (r := r)
      (f := f)
      (g := g)
      (Œºn := Œºn)
      (convPiece := convPiece)
      (h_minkowski_piece := h_minkowski_piece)
      (h_norm_piece_le := h_norm_piece_le)
  have h_convPartial_meas_mu :
      ‚àÄ N, AEStronglyMeasurable (convPartial N) Œº :=
    sfiniteSeq_convPartial_aestronglyMeasurable
      (Œº := Œº)
      (f := f)
      (g := g)
      (Œºpartial := Œºpartial)
      (convPartial := convPartial)
      (hŒºpartial_fin := hŒºpartial_fin)
      (hŒºpartial_le_smul := hŒºpartial_le_smul)
      (h_kernel_meas := h_kernel_meas)
      (h_convPartial_def := h_convPartial_def)
  have h_lintegral_norm_partial :
      ‚àÄ N,
        ‚à´‚Åª y, ‚Äñg y‚Äñ‚Çë ‚àÇ Œºpartial N
          = ‚àë k ‚àà Finset.range (N + 1), ‚à´‚Åª y, ‚Äñg y‚Äñ‚Çë ‚àÇ Œºn k := by
    intro N
    classical
    simp [Œºpartial]
  have h_lintegral_norm_sum :
      (‚àë' n, ‚à´‚Åª y, ‚Äñg y‚Äñ‚Çë ‚àÇ Œºn n) = ‚à´‚Åª y, ‚Äñg y‚Äñ‚Çë ‚àÇ Œº := by
    classical
    simpa [hŒº_sum]
      using
        (MeasureTheory.lintegral_sum_measure
          (Œº := Œºn)
          (f := fun y : G => ‚Äñg y‚Äñ‚Çë)).symm
  have h_lintegral_norm_tendsto :=
    sfiniteSeq_lintegral_norm_tendsto
      (Œº := Œº)
      (g := g)
      (Œºn := Œºn)
      (Œºpartial := Œºpartial)
      (hŒº_sum := hŒº_sum)
      (h_lintegral_norm_partial := h_lintegral_norm_partial)
  have h_convPartial_tendsto :=
    sfiniteSeq_convPartial_tendsto
      (Œº := Œº)
      (f := f)
      (g := g)
      (Œºn := Œºn)
      (Œºpartial := Œºpartial)
      (convPartial := convPartial)
      (convPiece := convPiece)
      (conv := conv)
      (hŒº_sum := hŒº_sum)
      (hŒºpartial_zero := hŒºpartial_zero)
      (hŒºpartial_succ := hŒºpartial_succ)
      (hŒºpartial_le_smul := hŒºpartial_le_smul)
      (hŒºn_le := hŒºn_le)
      (h_convPartial_def := fun _ => rfl)
      (h_convPiece_def := fun _ => rfl)
      (h_conv_def := rfl)
      (h_kernel_fiber_int_mu := h_kernel_fiber_int_mu)
  set bound : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû := fun N =>
    ENNReal.ofReal
      ((((N + 1 : ‚Ñù‚â•0‚àû) ^ (1 / r).toReal * eLpNorm f r Œº).toReal) *
        ‚àë k ‚àà Finset.range (N + 1), ‚à´ y, ‚Äñg y‚Äñ ‚àÇ Œºn k)
  have h_convPartial_bound' :
      ‚àÄ N, eLpNorm (convPartial N) r (Œºpartial N) ‚â§ bound N := by
    intro N
    simpa [bound] using h_convPartial_bound_sum N
  have h_bound_fin : ‚àÄ N, bound N < ‚àû := by
    intro N
    simp [bound]
  have h_F_aemeas :
      ‚àÄ N, AEMeasurable (fun x => ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal) Œº := by
    intro N
    exact (h_convPartial_meas_mu N).enorm.pow_const _
  have h_liminf_eq :
      (fun x : G => Filter.liminf (fun N => ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal) atTop)
        =·µê[Œº] fun x => ‚Äñconv x‚Äñ‚Çë ^ r.toReal := by
    refine h_convPartial_tendsto.mono ?_
    intro x hx
    have h_enorm_tendsto :
        Tendsto (fun N => ‚ÄñconvPartial N x‚Äñ‚Çë) atTop (ùìù (‚Äñconv x‚Äñ‚Çë)) :=
      (continuous_enorm.tendsto (conv x)).comp hx
    have h_pow_tendsto :
        Tendsto (fun N => ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal) atTop
          (ùìù (‚Äñconv x‚Äñ‚Çë ^ r.toReal)) :=
      (ENNReal.continuous_rpow_const.tendsto (‚Äñconv x‚Äñ‚Çë)).comp h_enorm_tendsto
    simpa using (Tendsto.liminf_eq h_pow_tendsto)
  have h_conv_liminf :
      ‚à´‚Åª x, ‚Äñconv x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº ‚â§
        Filter.liminf
          (fun N => ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº)
          atTop := by
    have h_base :=
      MeasureTheory.lintegral_liminf_le'
        (Œº := Œº)
        (f := fun N x => ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal)
        h_F_aemeas
    have h_congr :=
      lintegral_congr_ae (Œº := Œº)
        (f := fun x => Filter.liminf (fun N => ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal) atTop)
        (g := fun x => ‚Äñconv x‚Äñ‚Çë ^ r.toReal)
        h_liminf_eq
    simpa [h_congr.symm]
      using h_base
  have h_conv_integral_le_liminf :
      ‚à´‚Åª x, ‚Äñconv x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº ‚â§
        Filter.liminf
          (fun N => ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº)
          atTop :=
    h_conv_liminf
  have hŒºn_ac : ‚àÄ n, Œºn n ‚â™ Œº := by
    intro n
    have h_le := (MeasureTheory.sfiniteSeq_le (Œº := Œº) n)
    have h_le' : Œºn n ‚â§ (1 : ‚Ñù‚â•0‚àû) ‚Ä¢ Œº := by simpa [Œºn, one_smul] using h_le
    exact Measure.absolutelyContinuous_of_le_smul h_le'
  have h_convPartial_pow_meas_partial :
      ‚àÄ N M,
        AEMeasurable (fun x => ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal) (Œºpartial M) := by
    intro N M
    exact (h_F_aemeas N).mono_ac (hŒºpartial_ac M)
  have h_convPartial_pow_meas_piece :
      ‚àÄ N n,
        AEMeasurable (fun x => ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal) (Œºn n) := by
    intro N n
    exact (h_F_aemeas N).mono_ac (hŒºn_ac n)
  have h_lintegral_convPartial_partial :
      ‚àÄ N M,
        ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œºpartial (M + 1)
          = ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œºpartial M
              + ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œºn (M + 1) := by
    intro N M
    classical
    have h_add := hŒºpartial_succ M
    simp [h_add, Nat.succ_eq_add_one]
  have h_lintegral_convPartial_partial_sum :
      ‚àÄ N M,
        ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œºpartial M
          = ‚àë k ‚àà Finset.range (M + 1),
              ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œºn k := by
    intro N M
    classical
    induction' M with M hM
    ¬∑ have h_zero : Œºpartial 0 = Œºn 0 := by
        simp [Œºpartial, Nat.succ_eq_add_one]
      simp [h_zero, Œºpartial, Nat.succ_eq_add_one]
    ¬∑ have h_succ := h_lintegral_convPartial_partial N M
      simp [Nat.succ_eq_add_one, hM, h_succ,
        Finset.sum_range_succ, add_comm, add_left_comm, add_assoc]
  have h_lintegral_convPartial_sum :
      ‚àÄ N,
        (‚àë' k, ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œºn k)
          = ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº := by
    intro N
    classical
    simpa [hŒº_sum]
      using
        (MeasureTheory.lintegral_sum_measure
          (Œº := Œºn)
          (f := fun x : G => ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal)).symm
  have h_convPartial_integral_mono :
      ‚àÄ N, Monotone
        (fun M => ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œºpartial M) := by
    intro N
    intro M‚ÇÅ M‚ÇÇ hM
    exact lintegral_mono' (hŒºpartial_mono hM) fun _ => le_rfl
  have h_convPartial_integral_tendsto :
      ‚àÄ N,
        Tendsto (fun M => ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œºpartial M)
          atTop
          (ùìù (‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº)) :=
    sfiniteSeq_convPartial_integral_tendsto
      (Œº := Œº)
      (r := r)
      (Œºn := Œºn)
      (Œºpartial := Œºpartial)
      (convPartial := convPartial)
      (h_lintegral_convPartial_partial_sum :=
        h_lintegral_convPartial_partial_sum)
      (h_lintegral_convPartial_sum := h_lintegral_convPartial_sum)
  -- eLpNorm„ÅÆÂÆöÁæ©„Å´„Çà„Çä„ÄÅconv„ÅÆr‰πóÁ©çÂàÜ„ÅåÊúâÈôê„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ§∫„Åô
  have hr_ne_zero : r ‚â† 0 := by
    intro h
    rw [h] at hr
    simp at hr
  rw [eLpNorm_eq_lintegral_rpow_enorm hr_ne_zero hr_ne_top]
  have h_conv_integral_lt_top : ‚à´‚Åª x, ‚Äñconv x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº < ‚àû := by
    -- convPartial N„ÅÆÁ©çÂàÜ„ÅØconv„ÅÆÁ©çÂàÜ„ÅÆliminf‰ª•‰∏ä
    have h_bound_uniform :
        ‚àÄ N, ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº ‚â§
          (eLpNorm f p Œº * eLpNorm g q Œº) ^ r.toReal := by
      intro N
      -- ÂêÑÁÇπ„Åß„ÅÆconvPartial N„ÅÆË©ï‰æ°
      have h_convPartial_pointwise :
          ‚àÄ·µê x ‚àÇ Œº, ‚ÄñconvPartial N x‚Äñ‚Çë ‚â§
            ENNReal.ofReal (‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº) := by
        have h_int_ae :=
          integrable_norm_convolution_kernel_section (Œº := Œº)
            (f := f) (g := g) h_kernel_int
        refine h_int_ae.mono ?_
        intro x hx_int
        have h_norm_le :
            ‚ÄñconvPartial N x‚Äñ ‚â§ ‚à´ y, ‚Äñf (x - y) * g y‚Äñ ‚àÇ Œºpartial N := by
          simpa [convPartial] using norm_integral_le_integral_norm (f := fun y => f (x - y) * g y)
        have h_norm_prod : ‚à´ y, ‚Äñf (x - y) * g y‚Äñ ‚àÇ Œºpartial N =
            ‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œºpartial N := by
          congr 1
          ext y
          exact norm_mul _ _
        have h_mono : ‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œºpartial N ‚â§ ‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº :=
          integral_norm_mul_mono (Œºpartial N) Œº f g x (hŒºpartial_le N) hx_int
        have h_chain := le_trans (le_trans h_norm_le (h_norm_prod.le)) h_mono
        show ‚ÄñconvPartial N x‚Äñ‚Çë ‚â§ ENNReal.ofReal (‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº)
        simpa [ofReal_norm_eq_enorm] using ENNReal.ofReal_le_ofReal h_chain
      -- Á©çÂàÜ„ÅÆÂçòË™øÊÄß
      have h_lintegral_mono :
          ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº ‚â§
            ‚à´‚Åª x, (ENNReal.ofReal (‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº)) ^ r.toReal ‚àÇ Œº := by
        refine lintegral_mono_ae ?_
        refine h_convPartial_pointwise.mono ?_
        intro x hx
        exact ENNReal.rpow_le_rpow hx (ENNReal.toReal_nonneg)
      -- h_kernel_int„Åã„ÇâYoung's inequality„ÅÆÂΩ¢„ÅÆË©ï‰æ°„ÇíÂæó„Çã
      -- „Åì„Åì„Åß„ÅØÁ∞°Áï•Âåñ„ÅÆ„Åü„ÇÅ„ÄÅÁ©çÂàÜ„ÅåÊúâÈôê„Åß„ÅÇ„Çã„Åì„Å®„ÅÆ„Åø„Çí‰Ωø„ÅÜ
      calc
        ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº
        _ ‚â§ ‚à´‚Åª x, (ENNReal.ofReal (‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº)) ^ r.toReal ‚àÇ Œº :=
          h_lintegral_mono
        _ ‚â§ (eLpNorm f p Œº * eLpNorm g q Œº) ^ r.toReal :=
          lintegral_convolution_norm_bound
            (Œº := Œº) (f := f) (g := g) (p := p) (q := q) (r := r)
            hp hq hpqr hr_ne_top hf hf_r hg h_kernel_int h_pointwise_piece
    calc
      ‚à´‚Åª x, ‚Äñconv x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº
      _ ‚â§ Filter.liminf (fun N => ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº) atTop :=
        h_conv_integral_le_liminf
      _ ‚â§ (eLpNorm f p Œº * eLpNorm g q Œº) ^ r.toReal := by
        classical
        set A := (eLpNorm f p Œº * eLpNorm g q Œº) ^ r.toReal with hA_def
        have h_bounded :
            IsBoundedUnder (fun x‚ÇÅ x‚ÇÇ : ‚Ñù‚â•0‚àû => x‚ÇÅ ‚â• x‚ÇÇ) atTop
              (fun N => ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº) := by
          refine ‚ü®0, Filter.Eventually.of_forall ?_‚ü©
          intro N
          simp
        have h_liminf_le :
            Filter.liminf (fun N => ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº) atTop ‚â§ A := by
          refine Filter.liminf_le_of_le (u := fun N => ‚à´‚Åª x, ‚ÄñconvPartial N x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº)
            (a := A) h_bounded ?_
          intro b hb
          have h_eventually_leA :
              ‚àÄ·∂† N in atTop, b ‚â§ A :=
            (hb.and (Filter.Eventually.of_forall h_bound_uniform)).mono
              (fun _ h => (le_trans h.1 h.2))
          obtain ‚ü®N‚ÇÄ, hN‚ÇÄ‚ü© := Filter.eventually_atTop.1 h_eventually_leA
          exact hN‚ÇÄ N‚ÇÄ le_rfl
        simpa [hA_def] using h_liminf_le
      _ < ‚àû := by
        have h_mul : eLpNorm f p Œº * eLpNorm g q Œº < ‚àû :=
          ENNReal.mul_lt_top hf.eLpNorm_lt_top hg.eLpNorm_lt_top
        exact ENNReal.rpow_lt_top_of_nonneg (ENNReal.toReal_nonneg) h_mul.ne
  have h_rpow : (‚à´‚Åª x, ‚Äñconv x‚Äñ‚Çë ^ r.toReal ‚àÇ Œº) ^ (1 / r).toReal < ‚àû := by
    exact ENNReal.rpow_lt_top_of_nonneg (ENNReal.toReal_nonneg) h_conv_integral_lt_top.ne
  simpa using h_rpow

/--
Norm inequality for convolution in the finite-exponent Young regime. This refines the membership
lemma above by providing the optimal multiplicative bound on the `L^r` norm.
-/
lemma eLpNorm_convolution_le_mul
    (f g : G ‚Üí ‚ÑÇ)
    (p q r : ‚Ñù‚â•0‚àû)
    (hp : 1 ‚â§ p) (hq : 1 ‚â§ q)
    (hpqr : 1 / p + 1 / q = 1 + 1 / r)
    (hr_ne_top : r ‚â† ‚àû)
    (hf : MemLp f p Œº) (hg : MemLp g q Œº) :
    eLpNorm (fun x => ‚à´ y, f (x - y) * g y ‚àÇŒº) r Œº ‚â§
      eLpNorm f p Œº * eLpNorm g q Œº := by
  sorry

end ConvolutionAuxiliary
