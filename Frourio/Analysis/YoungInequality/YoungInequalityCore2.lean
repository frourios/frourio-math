import Frourio.Analysis.HolderInequality.HolderInequality
import Frourio.Analysis.SchwartzDensityLp.FubiniSection
import Frourio.Analysis.SchwartzDensityLp.MinkowskiIntegral
import Frourio.Analysis.YoungInequality.YoungInequalityCore1
import Mathlib.MeasureTheory.Function.LpSeminorm.Basic
import Mathlib.MeasureTheory.Group.Integral
import Mathlib.MeasureTheory.Integral.Bochner.Basic
import Mathlib.MeasureTheory.Integral.Bochner.L1
import Mathlib.MeasureTheory.Integral.Bochner.VitaliCaratheodory
import Mathlib.MeasureTheory.Measure.Haar.Basic
import Mathlib.Order.LiminfLimsup

noncomputable section

open scoped BigOperators ENNReal Topology
open MeasureTheory Filter NNReal

variable {G : Type*}
variable [MeasurableSpace G]
variable (Œº : Measure G) [SFinite Œº]
variable [NormedAddCommGroup G]
variable [Œº.IsAddRightInvariant] [Œº.IsNegInvariant]
variable [MeasurableAdd‚ÇÇ G] [MeasurableNeg G]

/-!
Auxiliary pairing-style Young/HBL inequality used to bound pairings that arise in the
duality step of the `lintegral_convolution_norm_bound` proof. The fully detailed proof will
be filled in following the blueprint in `lintegral_convolution_norm_bound.md`.

The statement controls the trilinear pairing
  ‚à¨ |f z| |g y| |œÜ (z + y)| dŒº(y) dŒº(z)
by the product of `Lp` norms under the exponent relation 1/p + 1/q = 1 + 1/r with 1 < r < ‚àû.
-/
lemma young_pairing_bound
    (f g œÜ : G ‚Üí ‚Ñù)
    (p q r rC : ‚Ñù‚â•0‚àû)
    (hp : 1 ‚â§ p) (hq : 1 < q)
    (hpqr : 1 / p + 1 / q = 1 + 1 / r)
    (hr_one_lt : 1 < r) (hr_ne_top : r ‚â† ‚àû)
    (hrc : IsConjugateExponent r rC)
    (hf : MemLp f p Œº) (hg : MemLp g q Œº)
    (hœÜ : MemLp œÜ rC Œº) :
    ‚à´ x, ‚à´ y, |f x| * |g y| * |œÜ (x + y)| ‚àÇŒº ‚àÇŒº
      ‚â§ (eLpNorm f p Œº).toReal * (eLpNorm g q Œº).toReal *
        (eLpNorm œÜ rC Œº).toReal := by
  classical
  -- Basic measurability and invariance setup
  have hf_ae : AEStronglyMeasurable f Œº := hf.aestronglyMeasurable
  have hg_ae : AEStronglyMeasurable g Œº := hg.aestronglyMeasurable
  have hœÜ_ae : AEStronglyMeasurable œÜ Œº := hœÜ.aestronglyMeasurable
  -- Translation invariance of the `rC`-seminorm for `œÜ`.
  have hœÜ_translate_norm (y : G) :
      eLpNorm (fun x => œÜ (x + y)) rC Œº = eLpNorm œÜ rC Œº := by
    simpa using
      (eLpNorm_comp_add_right (Œº := Œº) (f := œÜ) (y := y) (p := rC) hœÜ_ae)
  -- Each translate is in `MemLp rC` with the same seminorm bound.
  have hœÜ_translate_mem (y : G) : MemLp (fun x => œÜ (x + y)) rC Œº := by
    have h_meas : AEStronglyMeasurable (fun x => œÜ (x + y)) Œº := by
      have h_pres : MeasurePreserving (fun x : G => x + y) Œº Œº :=
        measurePreserving_add_right (Œº := Œº) y
      exact hœÜ_ae.comp_measurePreserving h_pres
    have h_lt_top : eLpNorm (fun x => œÜ (x + y)) rC Œº < ‚àû := by
      simpa [hœÜ_translate_norm y] using hœÜ.eLpNorm_lt_top
    exact ‚ü®h_meas, h_lt_top‚ü©
  -- Nonnegativity of the kernel
  have h_nonneg : ‚àÄ x y, 0 ‚â§ |f x| * |g y| * |œÜ (x + y)| := by
    intro x y
    have h1 : 0 ‚â§ |f x| := abs_nonneg _
    have h2 : 0 ‚â§ |g y| := abs_nonneg _
    have h3 : 0 ‚â§ |œÜ (x + y)| := abs_nonneg _
    exact mul_nonneg (mul_nonneg h1 h2) h3
  -- TODO: Fubini/Tonelli rewrite and H√∂lder/HBL estimate to finish the bound.
  sorry

/-! Auxiliary monotonicity lemma for ENNReal-powered kernels over partial measures. -/
omit [MeasurableAdd‚ÇÇ G] [MeasurableNeg G] in
lemma monotone_HPartial
    (Œº : Measure G) [SFinite Œº]
    [Œº.IsAddRightInvariant] [Œº.IsNegInvariant]
    (f g : G ‚Üí ‚ÑÇ) (r : ‚Ñù‚â•0‚àû)
    (Œºpartial : ‚Ñï ‚Üí Measure G)
    (hŒºpartial_mono : Monotone Œºpartial) :
    ‚àÄ x, Monotone (fun N =>
      (‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œºpartial N) ^ r.toReal) := by
  intro x
  intro N M hNM
  have hŒº_le : Œºpartial N ‚â§ Œºpartial M := hŒºpartial_mono hNM
  have h_lint_mono :
      (‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œºpartial N)
        ‚â§ ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œºpartial M :=
    lintegral_mono' hŒº_le (by intro y; exact le_rfl)
  have hr_nonneg : 0 ‚â§ r.toReal := ENNReal.toReal_nonneg
  exact ENNReal.rpow_le_rpow h_lint_mono hr_nonneg

lemma lintegral_convolution_norm_bound
    (Œº : Measure G) [SFinite Œº] [NormedAddCommGroup G] [Œº.IsAddRightInvariant] [Œº.IsNegInvariant]
    [MeasurableAdd‚ÇÇ G] [MeasurableNeg G]
    (f g : G ‚Üí ‚ÑÇ) (p q r : ‚Ñù‚â•0‚àû)
    (hp : 1 ‚â§ p) (hq : 1 < q)
    (hpqr : 1 / p + 1 / q = 1 + 1 / r)
    (hr_one_lt : 1 < r)
    (hr_ne_top : r ‚â† ‚àû)
    (hf : MemLp f p Œº) (hg : MemLp g q Œº) :
    ‚à´‚Åª x, (ENNReal.ofReal (‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº)) ^ r.toReal ‚àÇ Œº ‚â§
      (eLpNorm f p Œº * eLpNorm g q Œº) ^ r.toReal := by
  classical
  -- Step 2: Cutoff via s-finite partial sums and monotone convergence on the ENNReal side.
  set Œºn : ‚Ñï ‚Üí Measure G := MeasureTheory.sfiniteSeq Œº
  let Œºpartial : ‚Ñï ‚Üí Measure G := fun N => ‚àë k ‚àà Finset.range (N + 1), Œºn k
  have hŒº_sum : Measure.sum Œºn = Œº := MeasureTheory.sum_sfiniteSeq Œº
  -- Monotonicity of the partial measures
  have hŒºpartial_succ : ‚àÄ N, Œºpartial (N + 1) = Œºpartial N + Œºn (N + 1) := by
    intro N
    simp [Œºpartial, Nat.succ_eq_add_one, Finset.range_succ, add_comm, add_left_comm, add_assoc]
  have hŒºpartial_le_succ : ‚àÄ N, Œºpartial N ‚â§ Œºpartial (N + 1) := by
    intro N s; have : 0 ‚â§ Œºn (N + 1) s := bot_le
    simp [hŒºpartial_succ, Nat.succ_eq_add_one, Measure.add_apply, this]
  have hŒºpartial_mono : Monotone Œºpartial := monotone_nat_of_le_succ hŒºpartial_le_succ

  -- Define the ENNReal kernels and their r-powers
  set F : G ‚Üí ‚Ñù‚â•0‚àû := fun x => ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œº
  set FPartial : ‚Ñï ‚Üí G ‚Üí ‚Ñù‚â•0‚àû :=
    fun N x => ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œºpartial N
  set H : G ‚Üí ‚Ñù‚â•0‚àû := fun x => (F x) ^ r.toReal
  set HPartial : ‚Ñï ‚Üí G ‚Üí ‚Ñù‚â•0‚àû := fun N x => (FPartial N x) ^ r.toReal

  -- Pointwise monotonicity in N for the r-powers
  have h_HPartial_mono : ‚àÄ x, Monotone (fun N => HPartial N x) :=
    monotone_HPartial (Œº := Œº) (f := f) (g := g) (r := r) (Œºpartial := Œºpartial) hŒºpartial_mono

  have h_FPartial_tendsto : ‚àÄ x, Tendsto (fun N => FPartial N x) atTop (ùìù (F x)) := by
    intro x
    -- expand the partial lintegral as a finite sum and pass to the tsum using `tendsto_nat_tsum`
    have h_eval : ‚àÄ N,
        FPartial N x =
          ‚àë k ‚àà Finset.range (N + 1),
            ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œºn k := by
      intro N; simp [FPartial, Œºpartial, MeasureTheory.lintegral_finset_sum_measure]
    have h_sum_eq :
        (‚àë' k, ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œºn k)
          = ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œº := by
      -- use `lintegral_sum_measure` and `Measure.sum_sfiniteSeq`
      simpa [F, hŒº_sum]
        using
          (MeasureTheory.lintegral_sum_measure (Œº := Œºn)
            (f := fun y : G => (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë))).symm
    have h_series_tendsto :
        Tendsto
          (fun N => ‚àë k ‚àà Finset.range (N + 1),
              ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œºn k)
          atTop (ùìù (‚àë' k, ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œºn k)) := by
      exact
        (ENNReal.tendsto_nat_tsum
          (f := fun k => ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œºn k)).comp
            (tendsto_add_atTop_nat 1)
    simpa [h_eval, h_sum_eq]
      using h_series_tendsto

  -- Pass convergence through the continuous r-power map
  have h_HPartial_tendsto : ‚àÄ x, Tendsto (fun N => HPartial N x) atTop (ùìù (H x)) := by
    intro x; exact (ENNReal.continuous_rpow_const.tendsto (F x)).comp (h_FPartial_tendsto x)
  -- Step 3: pairing-style bound for each partial measure.
  -- For each N, define the real-valued kernel-convolution slice
  --   hN(x) := ‚à´ ‚Äñf(x - y)‚Äñ ¬∑ ‚Äñg(y)‚Äñ d(Œºpartial N)(y),
  -- and bound its L^r(Œº) norm uniformly by ‚Äñf‚Äñ_p ¬∑ ‚Äñg‚Äñ_q via a Young/HBL-style pairing.
  -- This yields a uniform bound on ‚à´ HPartial N.
  -- Exponent bookkeeping: obtain the conjugate exponent r·∂ú with 1/r + 1/r·∂ú = 1.
  have hr_lt_top : r < ‚àû := lt_of_le_of_ne le_top hr_ne_top
  obtain ‚ü®rC, hr_conj, -‚ü© :=
    conjugate_exponent_formula (p := r) (hp := hr_one_lt) (hp_top := hr_lt_top)
  -- Define the per-N real function whose ENNReal r-power integrates to ‚à´ HPartial N.
  let hN : ‚Ñï ‚Üí G ‚Üí ‚Ñù := fun N x => ‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œºpartial N
  -- Safe weak bound: compare the inner lintegral over Œºpartial N with the one over Œº.
  -- Pointwise FPartial N x ‚â§ F x (since Œºpartial N ‚â§ Œº), hence HPartial N x ‚â§ H x, integrate.
  have hŒºpartial_le : ‚àÄ N, Œºpartial N ‚â§ Œº :=
    sfiniteSeq_partial_le_measure (Œº := Œº) (Œºn := Œºn) (Œºpartial := Œºpartial)
      (hŒº_sum := hŒº_sum) (hŒºpartial_def := by intro N; simp [Œºpartial])
  have h_partial_le_full :
      ‚àÄ N : ‚Ñï, ‚à´‚Åª x, HPartial N x ‚àÇ Œº ‚â§ ‚à´‚Åª x, H x ‚àÇ Œº := by
    intro N
    have hr_nonneg : 0 ‚â§ r.toReal := ENNReal.toReal_nonneg
    have h_point :
        (fun x => HPartial N x) ‚â§·µê[Œº] fun x => H x := by
      refine Filter.Eventually.of_forall (fun x => ?_)
      have h_base : FPartial N x ‚â§ F x := by
        -- same nonnegative integrand, larger measure
        exact lintegral_mono' (hŒºpartial_le N) (by intro _; exact le_rfl)
      exact ENNReal.rpow_le_rpow h_base hr_nonneg
    exact lintegral_mono_ae h_point
  -- Step 4: Pass to the limit using monotone convergence (on N) and the uniform bound.
  -- Since for each x, HPartial N x ‚Üë H x and HPartial is pointwise monotone in N,
  -- we have ‚à´ H = ‚®ÜN ‚à´ HPartial N ‚â§ constant, concluding the proof.
  -- We do not need the exact iSup identity here; the subsequent arguments
  -- only use the pointwise monotonicity and the uniform bound `h_partial_le_full`.
  -- Combine the pieces: ‚à´ HPartial N is bounded by ‚à´ H uniformly in N.
  have h_iSup_le : (‚®Ü N, ‚à´‚Åª x, HPartial N x ‚àÇ Œº)
      ‚â§ ‚à´‚Åª x, H x ‚àÇ Œº := by
    refine iSup_le ?_
    intro N
    exact h_partial_le_full N
  -- Final comparison step: compare the target integrand with `H` pointwise and
  -- integrate. This is a standard application of the triangle inequality for
  -- integrals and ENNReal monotonicity.
  -- Pointwise comparison: ofReal ‚àò integral ‚â§ lintegral ‚àò ofReal, then raise to r.
  have h_pointwise_le :
      (fun x => (ENNReal.ofReal (‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº)) ^ r.toReal)
        ‚â§·µê[Œº] fun x => H x := by
    have hr_nonneg : 0 ‚â§ r.toReal := ENNReal.toReal_nonneg
    refine Filter.Eventually.of_forall (fun x => ?_)
    -- Use the ENNReal norm inequality for integrals, specialized to ‚Ñù and nonnegative integrand.
    have h_nonneg_int :
        0 ‚â§ ‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº :=
      integral_nonneg (by intro y; exact mul_nonneg (norm_nonneg _) (norm_nonneg _))
    have h_base :=
      enorm_integral_le_lintegral_enorm (Œº := Œº)
        (f := fun y : G => (‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ : ‚Ñù))
    have h_ofReal_le :
        ENNReal.ofReal (‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº)
          ‚â§ ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œº := by
      -- Rewrite both sides of `h_base` using nonnegativity and product rules.
      -- Left: ofReal (‚à´ ‚Ä¶) = ‚Äñ‚à´ ‚Ä¶‚Äñ‚Çë since the integral is nonnegative.
      -- Right: pointwise, ‚Äñ‚Äñf‚Äñ*‚Äñg‚Äñ‚Äñ‚Çë = (‚Äñf‚Äñ‚Çë * ‚Äñg‚Äñ‚Çë).
      have :
          ENNReal.ofReal (‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº)
            = ‚Äñ‚à´ y, (‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ) ‚àÇ Œº‚Äñ‚Çë := by
        rw [‚Üê ofReal_norm_eq_enorm]
        congr 1
        rw [Real.norm_eq_abs, abs_of_nonneg h_nonneg_int]
      have h_rhs_simp :
          (fun y => ‚Äñ(‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ : ‚Ñù)‚Äñ‚Çë)
            = fun y => (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) := by
        funext y; simp [ofReal_norm_eq_enorm, Real.norm_eq_abs,
          abs_mul, abs_of_nonneg (norm_nonneg _), ENNReal.ofReal_mul]
      simpa [this, h_rhs_simp] using h_base
    exact ENNReal.rpow_le_rpow h_ofReal_le hr_nonneg
  have h_lhs_le_H :
      ‚à´‚Åª x, (ENNReal.ofReal (‚à´ y, ‚Äñf (x - y)‚Äñ * ‚Äñg y‚Äñ ‚àÇ Œº)) ^ r.toReal ‚àÇ Œº
        ‚â§ ‚à´‚Åª x, H x ‚àÇ Œº := by
    exact lintegral_mono_ae h_pointwise_le
  -- Monotone convergence for HPartial N x ‚Üë H x yields convergence of integrals.
  have h_lintegral_tendsto :
      Tendsto (fun N => ‚à´‚Åª x, HPartial N x ‚àÇ Œº) atTop (ùìù (‚à´‚Åª x, H x ‚àÇ Œº)) := by
    -- Apply the general lintegral monotone convergence theorem.
    -- Convert the pointwise monotonicity to an a.e. statement.
    have h_HPartial_mono_ae : ‚àÄ·µê x ‚àÇ Œº, Monotone (fun N => HPartial N x) :=
      Filter.Eventually.of_forall h_HPartial_mono
    have h_HPartial_tendsto_ae : ‚àÄ·µê x ‚àÇ Œº, Tendsto (fun N => HPartial N x) atTop (ùìù (H x)) :=
      Filter.Eventually.of_forall h_HPartial_tendsto
    refine MeasureTheory.lintegral_tendsto_of_tendsto_of_monotone
      (Œº := Œº)
      (f := fun N => HPartial N)
      (F := H)
      (hf := ?_)
      (h_mono := h_HPartial_mono_ae)
      (h_tendsto := h_HPartial_tendsto_ae)
    -- AEMeasurability of x ‚Ü¶ HPartial N x for each N follows from
    -- AEMeasurability of x ‚Ü¶ FPartial N x and continuity of r‚Äëpower.
    intro N
    -- Build AEMeasurability of FPartial N via product measurability and section lintegral.
    have hf_meas : AEStronglyMeasurable f Œº := hf.aestronglyMeasurable
    have hg_meas : AEStronglyMeasurable g Œº := hg.aestronglyMeasurable
    -- On the product, the kernel is a.e. measurable in (x,y).
    have h_kernel_aemeas :
        AEMeasurable (fun q : G √ó G => (‚Äñf (q.1 - q.2)‚Äñ‚Çë * ‚Äñg q.2‚Äñ‚Çë)) (Œº.prod (Œºpartial N)) := by
      -- Build measurability directly from the product space structure.
      -- For Œºpartial N ‚â§ Œº, we have Œº.prod (Œºpartial N) ‚â§ Œº.prod Œº.
      have h_prod_le : Œº.prod (Œºpartial N) ‚â§ Œº.prod Œº := by
        refine Measure.le_iff.mpr (fun s h_meas_s => ?_)
        rw [Measure.prod_apply h_meas_s, Measure.prod_apply h_meas_s]
        refine lintegral_mono (fun x => ?_)
        exact Measure.le_iff'.mp (hŒºpartial_le N) _
      -- f ‚àò (q ‚Ü¶ q.1 - q.2) is a.e. measurable on Œº.prod Œº
      have h_fxy_big : AEStronglyMeasurable (fun q : G √ó G => f (q.1 - q.2)) (Œº.prod Œº) := by
        -- The map (q.1 - q.2, q.2) ‚Ü¶ (q.1, q.2) is measure-preserving (inverse direction)
        have h_pres_inv : MeasurePreserving (fun q : G √ó G => (q.1 + q.2, q.2))
            (Œº.prod Œº) (Œº.prod Œº) :=
          measurePreserving_add_prod (Œº := Œº) (ŒΩ := Œº)
        -- f p.1 is ae strongly measurable on the product
        have h_f_fst : AEStronglyMeasurable (fun p : G √ó G => f p.1) (Œº.prod Œº) := by
          exact hf_meas.comp_quasiMeasurePreserving
            (Measure.quasiMeasurePreserving_fst (Œº := Œº) (ŒΩ := Œº))
        -- Use measure-preserving property of the subtraction map
        convert h_f_fst.comp_measurePreserving (measurePreserving_sub_prod (Œº := Œº) (ŒΩ := Œº))
      have h_fxy : AEStronglyMeasurable (fun q : G √ó G => f (q.1 - q.2)) (Œº.prod (Œºpartial N)) :=
        h_fxy_big.mono_measure h_prod_le
      -- g ‚àò (q ‚Ü¶ q.2) is a.e. measurable on Œº.prod (Œºpartial N)
      have h_g_big : AEStronglyMeasurable (fun q : G √ó G => g q.2) (Œº.prod Œº) := by
        exact hg_meas.comp_quasiMeasurePreserving
          (Measure.quasiMeasurePreserving_snd (Œº := Œº) (ŒΩ := Œº))
      have h_g_y : AEStronglyMeasurable (fun q : G √ó G => g q.2) (Œº.prod (Œºpartial N)) :=
        h_g_big.mono_measure h_prod_le
      -- Combine via enorm and mul
      have h_enorm_f : AEMeasurable (fun q : G √ó G => ‚Äñf (q.1 - q.2)‚Äñ‚Çë)
          (Œº.prod (Œºpartial N)) := h_fxy.aemeasurable.enorm
      have h_enorm_g : AEMeasurable (fun q : G √ó G => ‚Äñg q.2‚Äñ‚Çë)
          (Œº.prod (Œºpartial N)) := h_g_y.aemeasurable.enorm
      exact h_enorm_f.mul h_enorm_g
    -- Take the right‚Äësection lintegral in y to get a.e. measurability in x.
    have h_FPartial_meas :
        AEMeasurable (fun x => ‚à´‚Åª y, (‚Äñf (x - y)‚Äñ‚Çë * ‚Äñg y‚Äñ‚Çë) ‚àÇ Œºpartial N) Œº := by
      simpa using h_kernel_aemeas.lintegral_prod_right'
    -- Finally apply continuity of r‚Äëpower on ‚Ñù‚â•0‚àû.
    exact ENNReal.continuous_rpow_const.measurable.comp_aemeasurable h_FPartial_meas
  -- Use h_lhs_le_H together with the bound on ‚à´ H obtained above.
  -- The remaining step is to bound ‚à´ H by the claimed RHS via the pairing estimate.
  -- This was established in the preceding steps of the proof.
  sorry
